[
    {
        "name": "Template_WaiitUntil",
        "content": "(()=>{\n  const { waitUntil, waitForElement, execOnPage,  } =    UserWayWidgetApp.getLib('remediation_util');\n  \n  waitUntil(() => document.querySelector('h1'),\n   (ulEl) => {\n     console.log('heading found')\n   });\n\n    waitForElement('a.chronolog-popup-link, a.BreitlingWidgetTrigger', (btn) => {\n      console.log('HERE', btn)\n  });    \n  \n})();"
    },
    {
        "name": "DatePicker1",
        "content": "(function () {\n  const { waitUntil, keys} =    UserWayWidgetApp.getLib('remediation_util');\n  \n  \t\t\tconst isDate = function(obj){\n        \t\treturn (/Date/).test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());\n    \t\t}\n\t\t\tconst getDate =  (fld) => {\n            \treturn new Date(new Date(fld.value).getTime())\n        \t}\n        \tconst setToStartOfDay = (date) => {\n        \t\tif (isDate(date)) date.setHours(0,0,0,0);\n    \t\t}\n\t\t\tconst dateFormat = (date, format) => {\n\t\t\t    date = date.toJSON().split(/[:/.TZ-]/);\n\t\t\t    return format.replace(/[ymdhis]/g, function (letter) {\n\t\t\t        return parseInt(date['ymdhis'.indexOf(letter)]);\n\t\t\t    });\n\t\t\t}\n        \t  const setDate =  (fld, date, min) => {\n\t\t\t\tconsole.log(date)\n\t            if (typeof date === 'string') {\n\t                date = new Date(Date.parse(date));\n\t            }\n\t\t        if (!isDate(date)) {\n\t\t            return;\n\t\t        }\n\t            if (isDate(min) && date < min) {\n\t                date = min;\n\t            }\n            \tlet d = new Date(date.getTime());\n            \tsetToStartOfDay(d);\n\t\t\t\t$(fld).pikaday('gotoDate', d)\n            \tfld.value = d.toString();\n\t\t\t\t// fld.value = dateFormat(d,'mm/dd/yyyy')\n\t\t\t\t \n        \t}\n\n\t        const adjustDate = (sign, days, fld) => {\n\t            var day = getDate(fld) || new Date();\n\t\t\t\t//console.log('hi', dateFormat(day,'mm/dd-yyyy'));\n\t            \n\t            // console.log('hi', picker.getDate(),' :t: ', getDate(fld));\n\t            var difference = parseInt(days)*24*60*60*1000;\n\t            var newDay;\n\n\t            if (sign === 'add') {\n\t                newDay = new Date(day.valueOf() + difference);\n\t            } else if (sign === 'subtract') {\n\t                newDay = new Date(day.valueOf() - difference);\n\t            }\n\t\t\t\t//console.log($(fld))\n\t\t\t\t // $(fld).pikaday('setDate', newDay).pikaday('show')\n\t             setDate(fld, newDay);\n\t        }\n\t        const navigateDates =(e) =>{\n\t        \tconst fld = e.currentTarget;\n\t\t   \t\tif (keys.isArrowDown(e)) {\n\t\t   \t\t\tadjustDate('add', 7, fld);\n                    e.stopPropagation(); e.preventDefault();\n\t\t   \t\t}else if(keys.isArrowUp(e)){\n\t\t   \t\t\tadjustDate('subtract', 7, fld);\n                    e.stopPropagation(); e.preventDefault();\n\t\t   \t\t} else if(keys.isArrowLeft(e)){\n\t\t   \t\t\tadjustDate('subtract', 1, fld);\n                   e.stopPropagation(); e.preventDefault();\n\t\t   \t\t} else if(keys.isArrowRight(e)){\n\t\t   \t\t\tadjustDate('add', 1, fld);\n                   e.stopPropagation(); e.preventDefault();\n\t\t   \t\t} else if(keys.isEnter(e) || keys.isEsc(e)){\n\t\t   \t\t\tfld.blur();\n\t\t   \t\t}\n\n\t        }\n\n\t\t   \twaitUntil(() => document.querySelector('#arrive-date'),\n\t\t   \t(arriveDate) => {\n\t\t\t\t// $(arriveDate).pikaday('show')\n\t\t   \t\tarriveDate.addEventListener('keydown', navigateDates)\n\t\t   \t});\n\t\t   \twaitUntil(() => document.querySelector('#depart-date'),\n\t\t   \t(departDate) => {\n\t\t   \t\tdepartDate.addEventListener('keydown', navigateDates)\n\t\t   \t});\n  \n})();"
    },
    {
        "name": "Template_LoopThrough",
        "content": "(()=>{\n  const { loopThroughElements } =    UserWayWidgetApp.getLib('remediation_util');\n  loopThroughElements(\n     '#ss-why-heading-content > div > h1, [id*=\"home-featured-blogs\"] .spt-container .spt-text-center.spt-cym-h-1-sm',\n    (heading) => {\n      heading.setAttribute('role', 'heading');\n      heading.setAttribute('aria-level', 2);\n    },\n  );\n})();"
    },
    {
        "name": "fischer",
        "content": "(()=>{\n  const { injectStylesheet} =    UserWayWidgetApp.getLib('remediation_util');\n       injectStylesheet(`\n.order-status-details .btn.secondary:focus,\n.order-status-details input[type=\"button\"].secondary:focus,\n.order-status-details input[type=\"submit\"].btn.secondary:focus {\n  color: #FFFFFF !important; \n  background: #0071D0 !important;\n}\n.order-status-details .btn.secondary:active,\n.order-status-details input[type=\"button\"].secondary:active,\n.order-status-details input[type=\"submit\"].btn.secondary:active {\n  color: #FFFFFF !important; \n  background: #005DAA !important;\n}\n\n.order-status-details .btn.secondary:focus-visible,\n.order-status-details input[type=\"button\"].secondary:focus-visible,\n.order-status-details input[type=\"submit\"].btn.secondary:focus-visible {\n  color: #FFFFFF !important; \n  background: #005DAA !important;\n}\n          \n        `);\n})();"
    },
    {
        "name": "DOMObserve",
        "content": "(()=>{\n  const { waitUntil, waitForElement, loopThroughElements, execOnPage,  } =    UserWayWidgetApp.getLib('remediation_util');\n const remediate=()=>{       \n    loopThroughElements('label[role=radio]', (radio) => {\n       radio.addEventListener('click',()=>console.log('Radio: '+radio.getAttribute('aria-label')+' clicked')) \n    });\n   }\n    remediate();\n\nwaitForElement('#cart-charity-container', (divEl) => {\n    console.log('HERE1',divEl)\n    const observer = new MutationObserver(()=>{\n        console.log('HERE2')\n        remediate();\n    })\n    observer.observe(divEl, {subtree: true, childList: true});\n});\n  \n})(); "
    },
    {
        "name": "ObserveAttribute",
        "content": "(()=>{\n  const { injectStylesheet, waitForElement} =    UserWayWidgetApp.getLib('remediation_util');\n       injectStylesheet(`\n          .unified-homepage .floating-menu .bottom-links .links-name{\n            color: rgb(252, 255, 60) !important;\n          }\n        `);\n    waitForElement('html', (html) => {\n      // console.log(html.classList.contains('userway-s3-2'))\n/** /      \n       const callback = (mutationsList) => {\n        let runOnce = false;\n        for(let mutation of mutationsList) {\n          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n            if (html.classList.contains('userway-s3-2')) {\n                console.log('contains');\n                 document.querySelectorAll('.bottom-links a').forEach(leftLink=>{\n                  leftLink.style.background\n                })\n                runOnce=true;\n                observer.disconnect();\n            }\n           }\n         }\n        };\n\n        const observer = new MutationObserver(callback);\n        observer.observe(html, {attributes: true, attributeFilter: ['class'] });\n/**/        \n      \n    });\n  \n  \n})();"
    },
    {
        "name": "MegaMenuHover",
        "content": "(() => {\n   //https://www.westgateresorts.com/hotels/new-york/midtown-manhattan/westgate-new-york-grand-central/\n  const {\n    loopThroughElements,\n    waitForElement,\n    clickOnSpace,\n    clickOnEnter,\n    injectStylesheet,\n  } = UserWayWidgetApp.getLib('remediation_util');\n  const HOVERED_LINK_CLASS = 'uw-csr-hovered';\n\n  injectStylesheet(`\n        li.main-nav__list-item.open .main-nav__dropdown {\n            display: block;\n        }   \n.intro .vault-link-button:focus-visible {\n    outline: 2px solid white !important\n}  \n.two-column-cards__button:focus-visible{\n outline: 2px solid yellow !important\n}\n   `);\n\n  waitForElement('.main-nav', (nav) => {\n    loopThroughElements(\n      'a.main-nav__has-dropdown',\n      (menuItem) => {\n        menuItem.addEventListener('mouseenter', () => menuItem.classList.add(HOVERED_LINK_CLASS));\n        menuItem.addEventListener('mouseleave', () =>\n          menuItem.classList.remove(HOVERED_LINK_CLASS),\n        );\n        menuItem.setAttribute('role', 'button');\n        menuItem.setAttribute('aria-expanded', 'false');\n\n        const li = menuItem.parentElement;\n        const subMenu = li.querySelector('ul.main-nav__dropdown');\n        const toggle = () => {\n          if (li.classList.contains('open')) {\n            li.classList.remove('open');\n            menuItem.setAttribute('aria-expanded', 'false');\n            menuItem?.focus();\n          } else {\n            li.classList.add('open');\n            menuItem.setAttribute('aria-expanded', 'true');\n            const firstItem = subMenu.querySelector('li:not(.main-nav__mobile-only) >a');\n            firstItem?.focus();\n          }\n        };\n        menuItem.addEventListener('click', (e) => {\n          if (menuItem.classList.contains(HOVERED_LINK_CLASS)) return;\n          e.preventDefault();\n          e.stopPropagation();\n          toggle();\n        });\n        clickOnSpace(menuItem);\n        clickOnEnter(menuItem);\n\n        subMenu.querySelectorAll('li:not(.main-nav__mobile-only) >a').forEach((subanchor) => {\n          subanchor.addEventListener('keydown', (e) => {\n            if (e.keyCode === 27) {\n              e.preventDefault();\n              toggle();\n            }\n          });\n        });\n      },\n      { ancestor: nav },\n    );\n  });\n  waitForElement('#js-mobile-nav-trigger', (mobileNav) => {\n    mobileNav.setAttribute('role', 'button');\n    mobileNav.setAttribute('tabindex', '0');\n    clickOnSpace(mobileNav);\n    clickOnEnter(mobileNav);\n  });\n})();"
    },
    {
        "name": "DrMArten_MainNavFeb212024",
        "content": "(()=>{\n  const { loopThroughElements } =    UserWayWidgetApp.getLib('remediation_util');\n      loopThroughElements('#dm-primary-nav > .navigation__link--category > a', (btn) => {\n        btn.setAttribute('role', 'button');\n        btn.setAttribute('tabindex', 0);\n        btn.setAttribute('aria-expanded', 'false');\n        const listitemwithChild = btn.parentElement;\n        const level1menu = listitemwithChild.dataset.subcatlevel1;\n        let submenu;\n        if (level1menu)\n          submenu = document.querySelector(\n            `.navigation__sub-categories[data-subcatlevel1=${level1menu}]`,\n          );\n        const closeMenu = () => {\n          listitemwithChild.classList.remove('active');\n          if (submenu) {\n            submenu.classList.remove('active');\n            submenu.parentElement.parentElement.classList.remove('active');\n          }\n          btn.setAttribute('aria-expanded', 'false');\n        };\n        btn.addEventListener('click', (e) => {\n          if (listitemwithChild.classList.contains('active')) {\n            closeMenu();\n          } else {\n            listitemwithChild.classList.add('active');\n            if (submenu) {\n              submenu.classList.add('active');\n              submenu.parentElement.parentElement.classList.add('active');\n               submenu.querySelector('a').focus();\n            }\n            btn.setAttribute('aria-expanded', 'true');\n          }\n          e.preventDefault();\n          e.stopPropagation();\n        });\n        btn.addEventListener('keydown', (e) => {\n          if (e.keyCode === 13 || e.keyCode === 32) {\n            e.preventDefault();\n            btn.click();\n          }\n          if (e.keyCode === 27) {\n            e.preventDefault();\n            closeMenu();\n            btn.focus();\n          }\n        });\n        submenu.querySelectorAll('a').forEach((subanchor) => {\n          subanchor.addEventListener('keydown', (e) => {\n            if (e.keyCode === 27) {\n              e.preventDefault();\n              closeMenu();\n              btn.focus();\n            }\n          });\n        });\n      });\n})();"
    },
    {
        "name": "PikaDayExt1",
        "content": "(() => {\n    const $ = window.jQuery;\n    if (!$) return;\n\n    // Initialize Pikaday on the input field\n    const $arrive = $('[name=arrive]').pikaday();\n    console.log($arrive);\n\n    // Define _onKeyChange function\n    function _onKeyChange(e) {\n        console.log('Key pressed:', e.keyCode); // Log the key code to check if the event is triggered\n\n        // Check if the Pikaday input field is visible\n        if ($arrive.is(':visible')) {\n            console.log('Pikaday is visible');\n\n            // Get the keycode\n            const keyCode = e.keyCode;\n\n            // Check for key actions\n            switch (keyCode) {\n                case 13:\n                case 27:\n                    // Blur the input field\n                    $arrive.blur();\n                    break;\n                case 37:\n                    // Subtract 1 day\n                    $arrive.pikaday('adjustDate', 'subtract', 1);\n                    break;\n                case 38:\n                    // Subtract 7 days\n                    $arrive.pikaday('adjustDate', 'subtract', 7);\n                    break;\n                case 39:\n                    // Add 1 day\n                    $arrive.pikaday('adjustDate', 'add', 1);\n                    break;\n                case 40:\n                    // Add 7 days\n                    $arrive.pikaday('adjustDate', 'add', 7);\n                    break;\n                case 8:\n                case 46:\n                    // Clear the date\n                    $arrive.pikaday('setDate', null);\n                    break;\n            }\n        }\n    }\n\n    // Bind _onKeyChange function to keydown event directly\n    $('[name=arrive]').on(\"keydown\", _onKeyChange);\n\n})();\n"
    },
    {
        "name": "PikadayExt2",
        "content": "import { createRemediation } from '../../common';\n\ncreateRemediation(\n  '2280639',\n  'ARD-1636',\n  '*',\n  ({\n    waitUntil,\n    loopThroughElements,\n    injectStylesheet,\n    generateRandomId,\n    getFocusableElement,\n    fireEvent,\n    focusableElementsSelector,\n    isElementVisible,\n    keys,\n    log,\n  }) => {\n    //pikaday datepicker\n    const $ = window.jQuery;\n\n    if (!$) {\n      return;\n    }\n\n    injectStylesheet(\n      `\n        .pika-single button:focus,\n        #arrive-date:focus,\n        #depart-date:focus {\n          outline: 2px solid rgb(0, 24, 255) !important;\n          outline-offset: -2px;\n        }\n      `,\n    );\n\n    const mimicPikadayAction = function (field, datepickerEl, cls) {\n      //prevent focus from going to trigger\n      field.type = 'hidden';\n      fireEvent(this, 'mousedown');\n      waitUntil(\n        () => datepickerEl.querySelector(`${cls}[uw-csr-remediated]`),\n        (btn) => {\n          field.type = 'text';\n          setTimeout(() => {\n            btn.focus();\n          }, 101);\n        },\n      );\n    };\n\n    const datepickerElClickHandler = (field) =>\n      function (evt) {\n        const datepickerEl = field.controls;\n        evt.stopPropagation();\n\n        if (this.classList.contains('pika-prev')) {\n          mimicPikadayAction.apply(this, [field, datepickerEl, '.pika-prev']);\n        } else if (this.classList.contains('pika-next')) {\n          mimicPikadayAction.apply(this, [field, datepickerEl, '.pika-next']);\n        } else {\n          fireEvent(this, 'mousedown');\n        }\n      };\n\n    const trapFocusDynamicContent = function (\n      wrapper,\n      { shouldBeInViewport = true, skipParentCheck = false } = {},\n    ) {\n      let focusableElements = [];\n\n      const setFocusableElements = () => {\n        focusableElements = Array.from(wrapper.querySelectorAll(focusableElementsSelector)).filter(\n          (el) => isElementVisible(el, { shouldBeInViewport, skipParentCheck }),\n        );\n      };\n\n      const handleTabKeydown = (e) => {\n        if (!keys.isTab(e)) {\n          return;\n        }\n        e.preventDefault();\n        setFocusableElements();\n        if (!focusableElements.length) {\n          return;\n        }\n\n        const lastIndex = focusableElements.length - 1;\n        const currentIndex = focusableElements.findIndex((el) => el === e.currentTarget);\n        let nextIndex = null;\n        if (currentIndex < 0) {\n          nextIndex = 0;\n        } else if (e.shiftKey) {\n          nextIndex = currentIndex - 1;\n          if (nextIndex < 0) {\n            nextIndex = lastIndex;\n          }\n        } else {\n          nextIndex = currentIndex + 1;\n          if (nextIndex > lastIndex) {\n            nextIndex = 0;\n          }\n        }\n        if (nextIndex !== null && focusableElements[nextIndex]) {\n          setKeydownListener(focusableElements[nextIndex]);\n          focusableElements[nextIndex].focus();\n        }\n      };\n      const setKeydownListener = (focusableElement) => {\n        if (!focusableElement.getAttribute('uw-csr-trap-focus-dynamic-content')) {\n          focusableElement.addEventListener('keydown', handleTabKeydown);\n          focusableElement.setAttribute('uw-csr-trap-focus-dynamic-content', '');\n        }\n      };\n\n      const setInactiveKeydownListener = (focusableElement) => {\n        if (!focusableElement.getAttribute('uw-csr-trap-focus-dynamic-content')) {\n          focusableElement.addEventListener('keydown', function (evt) {\n            if (keys.isTab(evt)) {\n              setFocusableElements();\n              evt.preventDefault();\n              //next btn\n              focusableElements[1]?.focus();\n            }\n          });\n          focusableElement.setAttribute('uw-csr-trap-focus-dynamic-content', '');\n        }\n      };\n\n      loopThroughElements('[tabindex=\"-1\"]', setInactiveKeydownListener, { ancestor: wrapper });\n      loopThroughElements(focusableElementsSelector, setKeydownListener, { ancestor: wrapper });\n    };\n\n    const fieldOnKeyDown = function (evt) {\n      if (keys.isSpace(evt) || keys.isEnter(evt) || keys.isArrowDown(evt)) {\n        evt.preventDefault();\n        this.click();\n      }\n    };\n\n    const dayBtnKeydownHandler = (datepicker, elementIdx) =>\n      function (evt) {\n        const container = datepicker.el;\n        let targetEl = null,\n          selector = '.pika-next';\n        if (keys.isArrowUp(evt)) {\n          targetEl = getElementByIndex(container, '.pika-button.pika-day', elementIdx - 7);\n          selector = '.pika-prev';\n        } else if (keys.isArrowDown(evt)) {\n          targetEl = getElementByIndex(container, '.pika-button.pika-day', elementIdx + 7);\n          selector = '.pika-next';\n        } else if (keys.isArrowLeft(evt)) {\n          targetEl = getElementByIndex(container, '.pika-button.pika-day', elementIdx - 1);\n          selector = '.pika-prev';\n        } else if (keys.isArrowRight(evt)) {\n          targetEl = getElementByIndex(container, '.pika-button.pika-day', elementIdx + 1);\n          selector = '.pika-next';\n        } else {\n          return;\n        }\n        if (targetEl) {\n          targetEl.focus();\n        } else {\n          waitUntil(\n            () => container.querySelector(selector),\n            (btn) => {\n              btn.click();\n              setTimeout(() => {\n                let dayBtnSelector = 'td:not(.is-outside-current-month) [data-pika-day]';\n                if (selector === '.pika-prev') {\n                  dayBtnSelector =\n                    'tr:last-child td:not(.is-outside-current-month) [data-pika-day]';\n                }\n                const focusableEl = container.querySelector(dayBtnSelector);\n                focusableEl?.focus();\n              }, 150);\n            },\n          );\n        }\n        evt.preventDefault();\n      };\n\n    const dayBtnFocusHandler = (container) =>\n      function () {\n        const parentEl = this.parentElement;\n        if (!parentEl.classList.contains('is-outside-current-month')) {\n          return;\n        }\n\n        //when is-outside-current-month day is focused\n        const day = this.getAttribute('data-pika-day');\n        const isGoingNext = parseInt(day) < 15;\n        const selector = isGoingNext ? '.pika-next' : '.pika-prev';\n\n        waitUntil(\n          () => container.querySelector(selector),\n          (btn) => {\n            btn.click();\n            setTimeout(() => {\n              //current month has selected,\n              if (!container.querySelector('td.is-selected')) {\n                const focusableEl = container.querySelector(`[data-pika-day=\"${day}\"]`);\n                const firstDayBtn = container.querySelector('[data-pika-day=\"1\"]');\n                firstDayBtn?.setAttribute('tabindex', -1);\n\n                focusableEl.setAttribute('tabindex', 0);\n                focusableEl?.focus();\n              }\n            }, 150);\n          },\n        );\n      };\n\n    const setDayBtnLabel = (dayBtn) => {\n      const year = dayBtn.getAttribute('data-pika-year');\n      const month = dayBtn.getAttribute('data-pika-month');\n      const day = dayBtn.getAttribute('data-pika-day');\n      dayBtn.setAttribute('aria-label', `${parseInt(month) + 1}/${day}/${year}`);\n    };\n\n    const remediateDatepickerElements = (field, datepicker) => {\n      const container = field.controls;\n      const prevBtn = container.querySelector('.pika-prev');\n      const nextBtn = container.querySelector('.pika-next');\n      const selectMonth = container.querySelector('.pika-select.pika-select-month');\n      const selectYear = container.querySelector('.pika-select.pika-select-year');\n      const table = container.querySelector('table.pika-table');\n\n      if (prevBtn) {\n        prevBtn.setAttribute('aria-label', 'previous month');\n        prevBtn.setAttribute('data-uw-rm-ignore', 1);\n        if (!prevBtn.getAttribute('uw-csr-remediated')) {\n          prevBtn.addEventListener('click', datepickerElClickHandler(field));\n          prevBtn.setAttribute('uw-csr-remediated', 1);\n        }\n      }\n\n      if (nextBtn) {\n        nextBtn.setAttribute('aria-label', 'next month');\n        nextBtn.setAttribute('data-uw-rm-ignore', 1);\n        if (!nextBtn.getAttribute('uw-csr-remediated')) {\n          nextBtn.addEventListener('click', datepickerElClickHandler(field));\n          nextBtn.setAttribute('uw-csr-remediated', 1);\n        }\n      }\n\n      if (selectMonth) {\n        selectMonth.setAttribute('aria-live', 'polite');\n        selectMonth.setAttribute('aria-label', 'month');\n      }\n\n      if (selectYear) {\n        selectYear.setAttribute('aria-live', 'polite');\n        selectYear.setAttribute('aria-label', 'year');\n      }\n\n      if (table) {\n        table.setAttribute('role', 'grid');\n        const tableLabel =\n          container.querySelector('.pika-select-month option[selected]')?.textContent +\n          ' ' +\n          container.querySelector('.pika-select-year option[selected]')?.textContent;\n        table.setAttribute('aria-label', tableLabel);\n      }\n\n      container.querySelectorAll('.is-disabled').forEach((disabledBtn) => {\n        disabledBtn.setAttribute('aria-disabled', true);\n      });\n\n      const daysBtns = Array.from(container.querySelectorAll('.pika-button.pika-day'));\n      const dayBtnSelected = daysBtns.find((dayBtn) =>\n        dayBtn.parentElement.classList.contains('is-selected'),\n      );\n\n      daysBtns.forEach((dayBtn, elementIdx) => {\n        let tabindex = -1;\n\n        if (dayBtnSelected) {\n          if (dayBtn === dayBtnSelected) {\n            tabindex = 0;\n            dayBtn.setAttribute('aria-selected', true);\n          }\n        } else {\n          const isDataPikaDayOne =\n            dayBtn.getAttribute('data-pika-day') === '1' &&\n            !dayBtn.parentElement.classList.contains('is-outside-current-month');\n\n          if (isDataPikaDayOne) {\n            tabindex = 0;\n          }\n        }\n\n        dayBtn.setAttribute('tabindex', tabindex);\n\n        if (dayBtn.getAttribute('uw-csr-remediated')) {\n          return;\n        }\n\n        dayBtn.addEventListener('keydown', dayBtnKeydownHandler(datepicker, elementIdx));\n        dayBtn.addEventListener('focus', dayBtnFocusHandler(container));\n        dayBtn.addEventListener('click', datepickerElClickHandler(field));\n        dayBtn.setAttribute('uw-csr-remediated', 1);\n        dayBtn.setAttribute('data-uw-rm-ignore', 1);\n        setDayBtnLabel(dayBtn);\n      });\n    };\n\n    const remediateDialog = (el, field) => {\n      const label = field.getAttribute('placeholder') || '';\n      el.id = el.id || generateRandomId();\n      el.setAttribute('aria-modal', true);\n      el.setAttribute('tabindex', -1);\n      el.setAttribute('aria-label', `Choose ${label} date`);\n      el.setAttribute('role', 'dialog');\n    };\n\n    const getElementByIndex = (container, selector, idx) => {\n      const elements = Array.from(container.querySelectorAll(selector));\n      return elements[idx];\n    };\n\n    const remediate = (field) => {\n      waitUntil(\n        () => $(field).data('pikaday'),\n        (datepicker) => {\n          datepicker.hide();\n          const ogOnSelect = datepicker._o?.onSelect;\n\n          const options = {\n            onOpen: function () {\n              field.setAttribute('aria-expanded', true);\n              setTimeout(() => {\n                const focusableEl =\n                  field.controls.querySelector('.is-selected .pika-button.pika-day') ||\n                  getFocusableElement('next', field.controls, {\n                    childrenOnly: true,\n                  });\n                focusableEl?.focus();\n              }, 200);\n            },\n            onDraw: function () {\n              remediateDatepickerElements(field, datepicker);\n              trapFocusDynamicContent(field.controls);\n            },\n            onClose: function () {\n              field.setAttribute('aria-expanded', false);\n              field.setAttribute('aria-hidden', true);\n              setTimeout(() => {\n                field.focus();\n              }, 101);\n            },\n            onSelect: function () {\n              // code from site\n              if (ogOnSelect) {\n                try {\n                  ogOnSelect();\n                } catch (e) {\n                  log('trying to use onSelect of parkterrace');\n                }\n              }\n              field.focus();\n              datepicker.hide();\n            },\n          };\n          datepicker.config(options);\n\n          const datepickerEl = datepicker.el;\n          field.removeEventListener('click', datepicker._onInputClick);\n          field.removeEventListener('focus', datepicker._onInputFocus);\n          field.removeEventListener('blur', datepicker._onInputBlur);\n\n          remediateDialog(datepickerEl, field);\n          field.controls = datepickerEl;\n\n          field.setAttribute('aria-readonly', true);\n          field.setAttribute('aria-controls', datepickerEl.id);\n          field.setAttribute('aria-expanded', false);\n          field.setAttribute('aria-haspopup', 'dialog');\n          field.addEventListener('keydown', fieldOnKeyDown);\n\n          const closeOnEsc = function (evt) {\n            if (keys.isEsc(evt)) {\n              evt.preventDefault();\n              datepicker.hide();\n              field.focus();\n            }\n          };\n\n          field.addEventListener('keydown', closeOnEsc);\n          datepickerEl.addEventListener('keydown', closeOnEsc);\n        },\n      );\n    };\n\n    waitUntil(() => document.getElementById('arrive-date'), remediate);\n    waitUntil(() => document.getElementById('depart-date'), remediate);\n  },\n);\n"
    },
    {
        "name": "BlockImages",
        "content": "function blockImagesAndReplaceAlt() {\n    document.querySelectorAll('img').forEach(img => {\n        const altText = img.alt || '';\n        img.style.display = 'none'; // Hide the image\n\n        // Create a replacement element with alt text\n        const replacement = document.createElement('span');\n        replacement.textContent = altText;\n        replacement.style.display = 'inline-block'; // Display the replacement inline\n\n        // Replace the image with the alt text\n        img.parentNode.insertBefore(replacement, img);\n    });\n\n    // Handle SVGs with accessible name\n    document.querySelectorAll('svg').forEach(svg => {\n        const accessibleName = svg.getAttribute('aria-label') || svg.getAttribute('title') || '';\n        svg.style.display = 'none'; // Hide the SVG\n\n        // Create a replacement element with accessible name\n        const replacement = document.createElement('span');\n        replacement.textContent = accessibleName;\n        replacement.style.display = 'inline-block'; // Display the replacement inline\n\n        // Replace the SVG with the accessible name\n        svg.parentNode.insertBefore(replacement, svg);\n    });\n}\n\n// Call the function to block images and replace them with alt text or accessible name of SVGs\nblockImagesAndReplaceAlt();"
    },
    {
        "name": "BK_Lang",
        "content": "(()=>{\nconst injectStyles = (css) => {\n\tconst style = document.createElement('style');\n\tstyle.innerHTML = css;\n\tdocument.head.appendChild(style);\n\treturn style;\n};\ninjectStyles(`\n    .langSpan{\n        color:black;font-weight:bold;font-family:sans-serif;font-size:small;background-color:yellow;outline:orange 2px dashed;margin:0 2px; padding:2px;speak:literal-punctuation;\n    }\n`)      \n  const divs=document.querySelectorAll('.langSpan');\n    if(divs.length>0){\n        divs.forEach(div=>div.remove())\n    } else {\n\nconst newElement = document.createElement('div');\nnewElement.innerHTML = '<strong class=\"langSpan\" id=\"langInfo\" role=\"status\"></strong>';\n    document.body.insertBefore(newElement, document.body.firstElementChild);\nif(document.getElementsByTagName('html')[0].getAttribute('xml:lang') && document.documentElement.lang) {\n    document.getElementById('langInfo').innerHTML += 'HTML document has lang=\\\"' + document.documentElement.lang + '\\\" AND? xml:lang=\\\"' + document.getElementsByTagName('html')[0].getAttribute('xml:lang') + '\\\" on page titled: ' + document.title;\n} else if(document.documentElement.lang) {\n    document.getElementById('langInfo').innerHTML +='HTML document has lang=\\\"' + document.documentElement.lang + '\\\" on page titled: ' + document.title;\n} else if(document.getElementsByTagName('html')[0].getAttribute('xml:lang')) {\n    document.getElementById('langInfo').innerHTML +='HTML document has xml:lang=\\\"' + document.getElementsByTagName('html')[0].getAttribute('xml:lang') + '\\\" on page titled: ' + document.title;\n} else {\n    document.getElementById('langInfo').innerHTML +='HTML document has no lang or xml:lang attributes on page titled: ' + document.title;\n}\n  let langEls =document.querySelectorAll('[lang]:not(html)');\n    if(langEls.length>0){\n        langEls.forEach(langEl=>{\n        langEl.insertAdjacentHTML('afterend', `\n            <span class=\"langSpan\">lang=\"${langEl.getAttribute('lang')}\"</span>\n        `);                                  \n    })}\n    \n        \n    }\n    \n})();"
    },
    {
        "name": "BK_Headings",
        "content": "(()=>{\nconst injectStyles = (css) => {\n\tconst style = document.createElement('style');\n\tstyle.innerHTML = css;\n\tdocument.head.appendChild(style);\n\treturn style;\n};\ninjectStyles(\n`\n.headSpan{\n    color:black;font-weight:bold;font-family:sans-serif;font-size:small;background-color:yellow;outline:orange 2px dashed;margin:0 2px; padding:2px;speak:literal-punctuation;\n}\n`\n)      \n  const divs=document.querySelectorAll('.headSpan');\n    if(divs.length>0){\n        divs.forEach(div=>div.remove())\n    } else{\n\nconst newElement = document.createElement('div');\nnewElement.innerHTML = '<strong class=\"headSpan\" id=\"headInfo\" role=\"status\"></strong>';\ndocument.body.insertBefore(newElement, document.body.firstElementChild);\nlet headingsFound=false;\n\ndocument.querySelectorAll('h1,h2,h3,h4,h5,h6').forEach((h) => {\n    headingsFound=true;\nh.innerHTML = `\n        <strong class=\"headSpan\">&lt;${h.tagName}&gt;</strong>\n            ${h.innerHTML}\n        <strong class=\"headSpan\">&lt;/${h.tagName}&gt;</strong>\n`\n})\ndocument.querySelectorAll('[role=heading][aria-level]').forEach((roleHeading) => {\n    headingsFound=true;\n    roleHeading.innerHTML = `\n    <strong class=\"headSpan\" >&lt;[role=heading][aria-level=${roleHeading.getAttribute('aria-level')}]&gt;</strong>\n    ${roleHeading.innerHTML}\n    <strong class=\"headSpan\" >&lt;[role=heading][aria-level=${roleHeading.getAttribute('aria-level')}]&gt;</strong>\n`\n})\n    if(!headingsFound){\n        document.getElementById('headInfo').innerHTML += 'No Headings Found on Page: ' + document.title;\n    }\n        \n        \n    }\n})();"
    },
    {
        "name": "BK_Section",
        "content": "(()=>{\nconst injectStyles = (css) => {\n\tconst style = document.createElement('style');\n\tstyle.innerHTML = css;\n\tdocument.head.appendChild(style);\n\treturn style;\n};\n\ninjectStyles(\n`\n.landmarkSpan{\n    color:black;font-weight:bold;font-family:sans-serif;font-size:small;background-color:yellow;margin:0 2px; padding:2px;\n}\n.outlineTemp{\n    outline:green 2px solid;padding:2px;\n}\n`\n)    \n  const divs=document.querySelectorAll('.landmarkSpan');\n    if(divs.length>0){\n        divs.forEach(div=>div.remove())\n        document.querySelectorAll('.outlineTemp').forEach(outlineTemp=>outlineTemp.classList.remove('outlineTemp'));\n    }\n    else{\n\nconst newElement = document.createElement('div');\nnewElement.innerHTML = '<strong class=\"landmarkSpan\" id=\"landInfo\"  role=\"status\"></strong>';\ndocument.body.insertBefore(newElement, document.body.firstElementChild);\nlet landFound=false;\n\ndocument.querySelectorAll('[role=main], [role=search], [role=contentinfo], [role=banner], [role=navigation], [role=complementary], [role=application]').forEach((land) => {\n    landFound=true;\n    land.classList.add('outlineTemp');\n    land.insertAdjacentHTML('beforebegin',  `<span class=\"landmarkSpan\">role= ${land.getAttribute('role')}</span>`);\n})        \n\ndocument.querySelectorAll('main, banner, footer, header, aside, nav').forEach((section) => {\n    section.classList.add('outlineTemp');\n    section.insertAdjacentHTML('beforebegin',  `<span class=\"landmarkSpan\">role=&lt;${section.tagName.toLowerCase()}&gt;</span>`);\n})         \n        \n     if(!landFound){\n        document.getElementById('landInfo').innerHTML += 'No Landmarks  Found on Page: ' + document.title;\n    }       \n        \n\n    }\n})();        "
    },
    {
        "name": "BK_images",
        "content": "(()=>{\nconst injectStyles = (css) => {\n\tconst style = document.createElement('style');\n\tstyle.innerHTML = css;\n\tdocument.head.appendChild(style);\n\treturn style;\n};\nconst getTxtContents =(elem)=>{    \n        return Array.from(elem.childNodes)\n            .filter(node => node !== elem)\n            .map(node => node.textContent || '')\n            .join('').trim();    \n}\ninjectStyles(\n`\n.imageSpan{\n    color:black;font-weight:bold;font-family:sans-serif;font-size:small;background-color:yellow;outline:orange 2px dashed;margin:0 2px; padding:2px;speak:literal-punctuation;\n}\n    .outlineGreen{\n        outline:green 2px solid;padding:2px;\n    }\n    .outlineRed{\n        outline: red 2px solid;padding:2px;\n    }\n`\n)    \n  const divs=document.querySelectorAll('.imageSpan');\n    if(divs.length>0){\n        divs.forEach(div=>div.remove())\n        document.querySelectorAll('.outlineGreen,.outlineRed').forEach(outlineTemp=>{\n            outlineTemp.classList.remove('outlineRed')\n            outlineTemp.classList.remove('outlineGreen')\n        });        \n    } else{\n        \ndocument.querySelectorAll('a[alt], button[alt], label[alt]').forEach(invalidAlt => {\n    invalidAlt.insertAdjacentHTML('beforebegin',`\n        <span class=\"imageSpan\">\n           INVALID❌alt=$(invalidAlt.getAttribute('alt')  on ${invalidAlt.tagName}\n        </span>\n`);\n})\ndocument.querySelectorAll('img, [role=img], svg').forEach(elem => {\n    // Check for aria-labelledby\n    const labelledBy = elem.getAttribute('aria-labelledby');\n    const ariaLabel = elem.getAttribute(\"aria-label\");\n    // const alt = elem.alt;\n    const alt = elem.getAttribute('alt');\n    let title = elem.getAttribute(\"title\");\n    if (elem.tagName.toLowerCase() === 'svg') {\n        title = elem.querySelector('title')?.textContent;\n    }\n    const imgRole = elem.getAttribute(\"role\");\n    let parentFigure = elem.closest('figure');\n    \n    let spanTxt, hidden=false;\n    if (imgRole) {\n        elem.insertAdjacentHTML('afterend', `\n            <span class=\"imageSpan\">\n               ❓role= \"${imgRole}\"\n            </span>            \n        `);    \n    }\n    if(elem.getAttribute('aria-hidden')==='true') {\n        elem.insertAdjacentHTML('afterend', `\n            <span class=\"imageSpan\">Hidden</span>            \n        `);        \n    }\n    if (labelledBy) {\n        elem.classList.add('outlineGreen');\n        const labelIds = labelledBy.split(' ');\n        const labelledByText = labelIds.map(id => {\n            const labelElement = document.getElementById(id);\n            return labelElement ? (labelElement.innerText || labelElement.textContent || '') : '';\n        }).join(' ').trim();\n        spanTxt = 'Labelledby Ids: ' + labelledBy;\n        if (labelledByText) {\n            spanTxt += ' : AccName - ' + labelledByText\n        }\n        elem.insertAdjacentHTML('afterend', `\n            <span class=\"imageSpan\">\n               ${spanTxt}\n            </span>            \n        `);\n        \n    } else  if (ariaLabel) {\n        elem.classList.add('outlineGreen');\n        elem.insertAdjacentHTML('afterend', `\n            <span class=\"imageSpan\">\n               ❓AccName from aria-label=\"${ariaLabel}\"\n            </span>            \n        `);        \n    } else  if (alt!=null) {\n        elem.classList.add('outlineGreen');\n        if(alt.trim()==='') {\n             elem.insertAdjacentHTML('afterend','<span class=\"imageSpan\">Empty alt:Presentation </span>')\n        }else{\n            elem.insertAdjacentHTML('afterend', `\n                <span class=\"imageSpan\">\n                   ❓AccName from alt=\"${elem.getAttribute('alt')}\"\n                </span>            \n            `);\n        }\n    } else  if (title) {\n        elem.classList.add('outlineGreen');\n        elem.insertAdjacentHTML('afterend', `\n            <span class=\"imageSpan\">\n               ❓AccName from title=\"${title}\"\n            </span>            \n        `);        \n    } else if(parentFigure){\n        elem.classList.add('outlineGreen');\n        const figcaption = parentFigure.querySelector('figcaption');\n        if (figcaption) {\n            elem.insertAdjacentHTML('afterend', `\n                <span class=\"imageSpan\">\n                   ❓AccName from figcaption=\"${figcaption.textContent.trim()}\"\n                </span>            \n            `);             \n        }\n    } else{\n            if(elem.tagName.toLowerCase()==='img'){\n                elem.classList.add('outlineRed');\n                elem.insertAdjacentHTML('afterend', `\n                    <span class=\"imageSpan\">No Alt text</span>            \n                `);\n            }\n    }\n    if (elem.tagName.toLowerCase() === 'svg') {\n       if(imgRole) {\n            const svgTxt = getTxtContents(elem);\n            if(svgTxt){\n                 elem.classList.add('outlineGreen');\n                elem.insertAdjacentHTML('afterend', `\n                    <span class=\"imageSpan\">❓AccName from innerText: ${svgTxt}</span>\n                `);\n            }\n        }else{\n            elem.classList.add('outlineRed');\n            elem.insertAdjacentHTML('afterend', `\n                <span class=\"imageSpan\">Missing image role for SVG</span>            \n            `);    \n           \n        }\n    }\n})\n        \n        \n    }\n    \n    \n})();"
    },
    {
        "name": "BK_Template",
        "content": "(()=>{\n    //Template\nconst injectStyles = (css) => {\n\tconst style = document.createElement('style');\n\tstyle.innerHTML = css;\n\tdocument.head.appendChild(style);\n\treturn style;\n};\ninjectStyles(`\n    .langSpan{\n        color:black;font-weight:bold;font-family:sans-serif;font-size:small;background-color:yellow;outline:orange 2px dashed;margin:0 2px; padding:2px;speak:literal-punctuation;\n    }\n    .outlineGreen{\n        outline:green 2px solid;padding:2px;\n    }\n    .outlineRed{\n        outline: red 2px solid;padding:2px;\n    }    \n`)      \n  const divs=document.querySelectorAll('.langSpan');\n    if(divs.length>0){\n        divs.forEach(div=>div.remove())\n    } else {\n        document.querySelectorAll('th').forEach(tbl =>{\n            \n            \n        })\n        \n    }\n    \n})();\n\n\nJquery to Vanilla JS\n1. Before\n$(this).before(\"<div>New Element</div>\") => this.insertAdjacentHTML('beforebegin', '<div>New Element</div>');\n\n2. After\n$(this).after(\"<span>\"); => this.insertAdjacentHTML('afterend', '<div>New Element</div>');\n\n3. Prepend\n$('body').prepend('<div>New Element</div>') => document.body.insertAdjacentHTML('afterbegin', '<div>New Element</div>');\n\n4. Append\n$(this).append(\"<div>New Element</div>\") => this.insertAdjacentHTML('beforeend', '<div>New Element</div>');"
    },
    {
        "name": "Backup_BKIMages",
        "content": "(()=>{\nconst injectStyles = (css) => {\n\tconst style = document.createElement('style');\n\tstyle.innerHTML = css;\n\tdocument.head.appendChild(style);\n\treturn style;\n};\nconst getTxtContents =(elem)=>{    \n        return Array.from(elem.childNodes)\n            .filter(node => node !== elem)\n            .map(node => node.textContent || '')\n            .join('').trim();    \n}\ninjectStyles(\n`\n.imageSpan{\n    color:black;font-weight:bold;font-family:sans-serif;font-size:small;background-color:yellow;outline:orange 2px dashed;margin:0 2px; padding:2px;speak:literal-punctuation;\n}\n.outlineTemp{\n    outline:green 2px solid;padding:2px;\n}\n`\n)    \n  const divs=document.querySelectorAll('.imageSpan');\n    if(divs.length>0){\n        divs.forEach(div=>div.remove())\n        document.querySelectorAll('.outlineTemp').forEach(outlineTemp=>outlineTemp.remove());\n    } else{\n        \ndocument.querySelectorAll('a[alt], button[alt], label[alt]').forEach(invalidAlt => {\n    invalidAlt.insertAdjacentHTML('beforebegin',`\n        <span class=\"imageSpan\">\n           INVALID❌alt=$(invalidAlt.getAttribute('alt')  on ${invalidAlt.tagName}\n        </span>\n`);\n})\ndocument.querySelectorAll('img, [role=img], svg').forEach(elem => {\n    // Check for aria-labelledby\n    const labelledBy = elem.getAttribute('aria-labelledby');\n    const ariaLabel = elem.getAttribute(\"aria-label\");\n    // const alt = elem.alt;\n    const alt = elem.getAttribute('alt');\n    let title = elem.getAttribute(\"title\");\n    if (elem.tagName.toLowerCase() === 'svg') {\n        title = elem.querySelector('title')?.textContent;\n    }\n    const imgRole = elem.getAttribute(\"role\");\n    let spanTxt, hidden=false;\n    if (imgRole) {\n        elem.insertAdjacentHTML('afterend', `\n            <span class=\"imageSpan\">\n               ❓role= \"${imgRole}\"\n            </span>            \n        `);    \n    }\n    if(elem.getAttribute('aria-hidden')==='true') {\n        elem.insertAdjacentHTML('afterend', `\n            <span class=\"imageSpan\">Hidden</span>            \n        `);        \n    }\n// if ( elem.getAttribute('alt')!=null) {\n//         console.log(elem)\n// }    \n    if (labelledBy) {\n        elem.classList.add('outlineTemp');\n        const labelIds = labelledBy.split(' ');\n        const labelledByText = labelIds.map(id => {\n            const labelElement = document.getElementById(id);\n            return labelElement ? (labelElement.innerText || labelElement.textContent || '') : '';\n        }).join(' ').trim();\n        spanTxt = 'Labelledby Ids: ' + labelledBy;\n        if (labelledByText) {\n            spanTxt += ' : AccName - ' + labelledByText\n        }\n        elem.insertAdjacentHTML('afterend', `\n            <span class=\"imageSpan\">\n               ${spanTxt}\n            </span>            \n        `);\n        \n    } else  if (ariaLabel) {\n        elem.classList.add('outlineTemp');\n        elem.insertAdjacentHTML('afterend', `\n            <span class=\"imageSpan\">\n               ❓AccName from aria-label=\"${ariaLabel}\"\n            </span>            \n        `);        \n    } else  if (alt!=null) {\n        elem.classList.add('outlineTemp');\n        // console.log(elem)\n        if(alt.trim()==='') {\n             elem.insertAdjacentHTML('afterend','<span class=\"imageSpan\">Empty alt:Presentation </span>')\n        }else{\n            elem.insertAdjacentHTML('afterend', `\n                <span class=\"imageSpan\">\n                   ❓AccName from alt=\"${elem.getAttribute('alt')}\"\n                </span>            \n            `);\n        }\n    } else  if (title) {\n        elem.classList.add('outlineTemp');\n        elem.insertAdjacentHTML('afterend', `\n            <span class=\"imageSpan\">\n               ❓AccName from title=\"${title}\"\n            </span>            \n        `);        \n    } else{\n            elem.insertAdjacentHTML('afterend', `\n                <span class=\"imageSpan\">No Alt text</span>            \n            `);\n    }\n    if (elem.tagName.toLowerCase() === 'svg') {\n       if(imgRole) {\n            const svgTxt = getTxtContents(elem);\n            if(svgTxt){\n                elem.insertAdjacentHTML('afterend', `\n                    <span class=\"imageSpan\">❓AccName from innerText: ${svgTxt}</span>\n                `);\n            }\n        }else{\n            elem.insertAdjacentHTML('afterend', `\n                <span class=\"imageSpan\">Missing image role for SVG</span>            \n            `);    \n           \n        }\n    }\n})\n        \n        \n    }\n    \n    \n})();"
    },
    {
        "name": "BK_Iframe",
        "content": "(()=>{\nconst injectStyles = (css) => {\n\tconst style = document.createElement('style');\n\tstyle.innerHTML = css;\n\tdocument.head.appendChild(style);\n\treturn style;\n};\ninjectStyles(`\n    .iframeSpan{\n        color:black;font-weight:bold;font-family:sans-serif;font-size:small;background-color:yellow;outline:orange 2px dashed;margin:0 2px; padding:2px;speak:literal-punctuation;\n    }\n    .outlineGreen{\n        outline:green 2px solid;padding:2px;\n    }\n    .outlineRed{\n        outline: red 2px solid;padding:2px;\n    }    \n    \n`)      \n  const divs=document.querySelectorAll('.iframeSpan');\n    if(divs.length>0){\n        divs.forEach(div=>div.remove())\n        document.querySelectorAll('.outlineGreen,.outlineRed').forEach(outlineTemp=>{\n            outlineTemp.classList.remove('outlineRed')\n            outlineTemp.classList.remove('outlineGreen')\n        });\n    } else {\n        const newElement = document.createElement('div');\n        newElement.innerHTML = '<strong class=\"iframeSpan\" id=\"iframeInfo\" role=\"status\"></strong>';\n        document.body.insertBefore(newElement, document.body.firstElementChild);\n        let iframeFound=false;\n        document.querySelectorAll('iframe:not([aria-hidden=\"true\"])').forEach(iframe=>{\n            const title = iframe.getAttribute('title');\n            const name  = iframe.getAttribute('name');\n            const src = iframe.getAttribute('src');\n            let spanTxt;\n            iframeFound=true;\n            if(!title){\n                iframe.classList.add('outlineRed');\n                if(name) spanTxt=`\n                   <span class=\"iframeSpan\">\n                       &lt;iframe❌NO TITLE name=\"${name}\" src=\"${src}\" &gt;</span>\n                    `\n                else spanTxt=`\n                   <span class=\"iframeSpan\">\n                       &lt;iframe❌NO TITLE src=\"${src}\" &gt;</span>\n                    `\n            } else {\n                iframe.classList.add('outlineGreen');\n                if(name) spanTxt=`\n                   <span class=\"iframeSpan\">\n                       &lt;iframe 👍 title=${title} name=\"${name}\" src=\"${src}\" &gt;</span>\n                    `\n                else spanTxt=`\n                   <span class=\"iframeSpan\">\n                       &lt;iframe title=${title} src=\"${src}\" &gt;</span>\n                    `\n            }\n            iframe.insertAdjacentHTML('beforebegin',  spanTxt);\n        })\n        if(!iframeFound) document.getElementById('iframeInfo').innerHTML += 'No Iframes  Found on Page: ' + document.title;\n    }\n    \n})();"
    },
    {
        "name": "BK_Lists",
        "content": "(()=>{\nconst injectStyles = (css) => {\n\tconst style = document.createElement('style');\n\tstyle.innerHTML = css;\n\tdocument.head.appendChild(style);\n\treturn style;\n};\ninjectStyles(`\n    .listSpan{\n        color:black;font-weight:bold;font-family:sans-serif;font-size:small;background-color:yellow;outline:orange 2px dashed;margin:0 2px; padding:2px;speak:literal-punctuation;\n    }\n    .outlineRed{\n        outline: red 2px solid;padding:2px;\n    }\n    .outlineGreen{\n        outline:green 2px solid;padding:2px;\n    }    \n`)      \n  const divs=document.querySelectorAll('.listSpan');\n    if(divs.length>0){\n        divs.forEach(div=>div.remove())\n        document.querySelectorAll('.outlineGreen,.outlineRed').forEach(outlineTemp => {\n            outlineTemp.classList.remove('outlineRed')\n            outlineTemp.classList.remove('outlineGreen')\n        })      \n    } else {\n        const newElement = document.createElement('div');\n        newElement.innerHTML = '<strong class=\"listSpan\" id=\"listInfo\" role=\"status\"></strong>';\n        document.body.insertBefore(newElement, document.body.firstElementChild);\n        let listFound=false;\n        document.querySelectorAll('ul > :not(li),ol > :not(li)').forEach(childNotList=>{\n            const parentList =childNotList.parentElement;\n            childNotList.classList.add('outlineRed');\n            parentList.classList.add('outlineRed');\n            parentList.insertAdjacentHTML('afterbegin', `<strong class=\"listSpan\">❌NO CHILD LI</strong>`);\n        });\n        document.querySelectorAll('ul, ol, dl').forEach(listEl=>listEl.classList.add('outlineGreen'))\n        document.querySelectorAll('ul, ol, dl, li, dd, dt').forEach(listEl => {\n            listFound=true;\n            listEl.insertAdjacentHTML('afterbegin', `<strong class=\"listSpan\">&lt;${listEl.tagName.toLowerCase()}&gt;</strong>`);\n            listEl.insertAdjacentHTML('beforeend', `<strong class=\"listSpan\">&lt;/${listEl.tagName.toLowerCase()}&gt;</strong>`);\n        })\n        if(!listFound) document.getElementById('listInfo').innerHTML += 'No Lists  Found on Page: ' + document.title;\n    }\n    \n})();"
    },
    {
        "name": "BK_Forms",
        "content": "(()=>{\n    //Template\nconst injectStyles = (css) => {\n\tconst style = document.createElement('style');\n\tstyle.innerHTML = css;\n\tdocument.head.appendChild(style);\n\treturn style;\n};\nconst getTxtContents =(elem)=>{\n        return Array.from(elem.childNodes)\n            .filter(node => node !== elem && node.tagName?.toLowerCase() !== 'title')\n            .map(node => node.textContent || '')\n            .join('').trim();    \n}\nconst getReferencedContents = (arr) => {\n    const Ids = arr.split(' ');\n    return Ids.map(id => {\n                    const labelElement = document.getElementById(id);\n                    return labelElement ? (labelElement.innerText || labelElement.textContent || '') : '';\n                }).join(' ').trim();     \n }\ninjectStyles(`\n    .formSpan{\n        color:black;font-weight:bold;font-family:sans-serif;font-size:small;background-color:yellow;outline:orange 2px dashed;margin:0 2px; padding:2px;speak:literal-punctuation;\n    }\n    .outlineGreen{\n        outline:green 2px solid;padding:2px;\n    }\n    .outlineRed{\n        outline: red 2px solid;padding:2px;\n    }    \n`)      \n  const divs=document.querySelectorAll('.formSpan');\n    if(divs.length>0){\n        divs.forEach(div=>div.remove())\n        document.querySelectorAll('.outlineGreen,.outlineRed').forEach(outlineTemp=>{\n            outlineTemp.classList.remove('outlineRed')\n            outlineTemp.classList.remove('outlineGreen')\n        });        \n    } else {\n        let spanTxt, descTxt;\n        const elements = document.querySelectorAll('input, textarea, select');\n        const filteredElements = Array.from(elements).filter(element => {\n            return !(element.type === 'hidden' || \n                     element.type === 'button' || \n                     element.type === 'submit' || \n                     element.type === 'reset');\n        });        \n        filteredElements.forEach(elem => {\n            const labelledBy = elem.getAttribute('aria-labelledby');\n            const ariaLabel = elem.getAttribute(\"aria-label\");\n            let noLabel=false;\n            let explicitLabel;            \n            if (elem.id) {\n                explicitLabel = document.querySelector(`label[for=\"${elem.id}\"]`);\n            }\n            const implicitLabel = elem.closest('label');\n            const title = elem.getAttribute(\"title\");\n            const txtContent =  elem.innerText || elem.textContent ;\n\n            const ariaRequired = elem.getAttribute(\"aria-required\");\n            const ariaInvalid = elem.getAttribute(\"aria-invalid\");\n            const ariaAC = elem.getAttribute(\"aria-autocomplete\");\n            const describedBy = elem.getAttribute('aria-describedby');\n            \n            elem.classList.add('outlineGreen');\n\n            if (labelledBy) {\n                const labelledByText = getReferencedContents(labelledBy);\n                spanTxt = 'Labelledby Ids: ' + labelledBy;\n                if (labelledByText) {\n                    spanTxt += ' : AccName - ' + labelledByText\n                }\n            } else  if (ariaLabel) {\n                spanTxt = `AccName from aria-label=\"${ariaLabel}\"`\n            } else  if (explicitLabel) {\n                spanTxt = `AccName from explicit label: \"${explicitLabel.innerText || explicitLabel.textContent}\"`\n            } else if(implicitLabel){\n                const labelContents = getTxtContents(implicitLabel);\n                if(labelContents){\n                    spanTxt = `AccName from wrapping label: \"${labelContents}\"`\n                }\n            } else if(title){\n                spanTxt = `AccName from inner title: \"${title}\"`\n            } else if(txtContent){\n                spanTxt = `AccName from inner contents: \"${txtContent}\"`\n            }else{\n                 elem.classList.add('outlineRed');\n                 noLabel=true;\n                 spanTxt = `No Label`\n            }\n            elem.insertAdjacentHTML('afterend', `\n                <span class=\"formSpan\">${spanTxt}</span>\n            `);\n\n            if (ariaRequired) elem.insertAdjacentHTML('afterend', `<span class=\"formSpan\">ariaRequired=\"${ariaRequired}\"</span>`);\n            if (ariaInvalid) elem.insertAdjacentHTML('afterend', `<span class=\"formSpan\">ariaInvalid=\"${ariaInvalid}\"</span>`);\n            if (ariaAC) elem.insertAdjacentHTML('afterend', `<span class=\"formSpan\">aria-autocomplete=\"${ariaAC}\"</span>`);\n\n            const fieldset = elem.closest('fieldset');\n            if(fieldset){\n                fieldset.classList.add('outlineGreen');\n                fieldset.insertAdjacentHTML('afterbegin', `<strong class=\"formSpan\">&lt;legend&gt;</strong>`);\n                fieldset.insertAdjacentHTML('beforeend', `<strong class=\"formSpan\">&lt;/legend&gt;</strong>`);            \n\n                const legend = fieldset.querySelector('legend');\n                if(legend){\n                    legend.classList.add('outlineGreen');\n                    legend.innerHTML = `<strong class=\"formSpan\">&lt;legend&gt;${legend.innerHTML}<strong class=\"formSpan\">/legend&gt;</strong>`;\n                    legend.insertAdjacentHTML('afterbegin', `<strong class=\"formSpan\">&lt;fieldset&gt;</strong>`);\n                    legend.insertAdjacentHTML('beforeend', `<strong class=\"formSpan\">&lt;/fieldset&gt;</strong>`);                      \n                }                \n            }  \n            \n            if (describedBy) {\n                const describedByText = getReferencedContents(describedBy);\n                descTxt = 'Described by ids: ' + describedBy;\n                if (describedByText) {\n                    descTxt += ' : AccDescription: ' + describedByText\n                }\n                elem.insertAdjacentHTML('afterend', `<span class=\"formSpan\">${descTxt}</span>`);\n            }            \n        }) //end input forEach\n        // document.querySelectorAll('legend').forEach(elem => {\n        //     elem.classList.add('outlineGreen');\n        //     elem.insertAdjacentHTML('afterbegin', `<strong class=\"formSpan\">&lt;legend&gt;</strong>`);\n        //     elem.insertAdjacentHTML('beforeend', `<strong class=\"formSpan\">&lt;/legend&gt;</strong>`);            \n        // })\n        // document.querySelectorAll('fieldset').forEach(elem => {\n        //     elem.classList.add('outlineGreen');\n        //     // elem.innerHTML = `<strong class=\"formSpan\">&lt;fieldset&gt;${elem.innerHTML}<strong class=\"formSpan\">/fieldset&gt;</strong>`;\n        //     elem.insertAdjacentHTML('afterbegin', `<strong class=\"formSpan\">&lt;fieldset&gt;</strong>`);\n        //     elem.insertAdjacentHTML('beforeend', `<strong class=\"formSpan\">&lt;/fieldset&gt;</strong>`);            \n            \n        // })        \n    }\n    \n})();"
    },
    {
        "name": "BK_Tables",
        "content": "(()=>{\n    //Template\nconst injectStyles = (css) => {\n\tconst style = document.createElement('style');\n\tstyle.innerHTML = css;\n\tdocument.head.appendChild(style);\n\treturn style;\n};\nconst getReferencedContents = (arr) => {\n    const Ids = arr.split(' ');\n    return Ids.map(id => {\n                    const labelElement = document.getElementById(id);\n                    return labelElement ? (labelElement.innerText || labelElement.textContent || '') : '';\n                }).join(' ').trim();     \n }    \ninjectStyles(`\n    .tableSpan{\n        color:black;font-weight:bold;font-family:sans-serif;font-size:small;background-color:yellow;outline:orange 2px dashed;margin:0 2px; padding:2px;speak:literal-punctuation;\n    }\n    .outlineGreen{\n        outline:green 2px solid;padding:2px;\n    }\n    .outlineOlive{\n        outline:2px solid olive;\n    }\n    .outlineOrange{\n        outline:orange 2px dashed;padding:2px;\n    }\n`)      \n  const divs=document.querySelectorAll('.tableSpan');\n    if(divs.length>0){\n        divs.forEach(div=>div.remove())\n        document.querySelectorAll('.outlineGreen,.outlineOlive,.outlineOrange').forEach(outlineTemp=>{\n            outlineTemp.classList.remove('outlineOlive')\n            outlineTemp.classList.remove('outlineGreen')\n            outlineTemp.classList.remove('outlineOrange')\n        });        \n    } else {\n        const newElement = document.createElement('div');\n        newElement.innerHTML = '<strong class=\"tableSpan\" id=\"tblInfo\" role=\"status\"></strong>';\n        document.body.insertBefore(newElement, document.body.firstElementChild);\n        let tableFound=false;        \n        document.querySelectorAll('caption').forEach(caption =>{\n            caption.classList.add('outlineGreen')\n            caption.innerHTML= `\n                <strong class=\"tableSpan\">&lt;caption&gt;</strong>${caption.innerHTML}<strong class=\"tableSpan\">&lt;/caption&gt;</strong> \n            `\n        })\n        \n        document.querySelectorAll('th').forEach(th =>{\n            th.classList.add('outlineGreen');\n            const thRole = th.getAttribute(\"role\");\n            const thScope = th.getAttribute(\"scope\");\n            const thHeaders = th.getAttribute(\"headers\");\n            let spanTxt;\n            \n            if (thRole) {\n                th.insertAdjacentHTML('afterbegin', `<strong class=\"tableSpan\">th role= \"${thRole}\"</span>`)\n            }\n            if (thScope) {\n                th.insertAdjacentHTML('afterbegin', `<strong class=\"tableSpan\">th scope= \"${thScope}\"</span>`)\n            }\n            if (thHeaders) {\n                th.insertAdjacentHTML('afterbegin', `<strong class=\"tableSpan\">th Headers= \"${thHeaders}\"</span>`)\n            }      \n            \n        })\n        \n        document.querySelectorAll('td').forEach(td =>{\n            td.classList.add('outlineOrange');\n            const tdRole = td.getAttribute(\"role\");\n            const tdScope = td.getAttribute(\"scope\");\n            const tdHeaders = td.getAttribute(\"headers\");\n            \n            if (tdRole) {\n                td.insertAdjacentHTML('afterbegin', `<strong class=\"tableSpan\">td role= \"${tdRole}\"</span>`)\n            }\n            if (tdScope) {\n                td.insertAdjacentHTML('afterbegin', `<strong class=\"tableSpan\">td scope= \"${tdScope}\"</span>`)\n            }\n            if (tdHeaders) {\n                td.insertAdjacentHTML('afterbegin', `<strong class=\"tableSpan\">td Headers= \"${tdHeaders}\"</span>`)\n            }            \n            \n        })\n        document.querySelectorAll('table, [role=grid]').forEach(table =>{\n            const summary = table.getAttribute('summary');\n            const labelledBy = table.getAttribute('aria-labelledby');\n            let labelledByText;\n            if(labelledBy) labelledByText= getReferencedContents(labelledBy);\n            const ariaLabel = table.getAttribute(\"aria-label\");\n            const ariaRole = table.getAttribute(\"role\");\n            const title = table.getAttribute(\"title\");\n            \n            const tagName = table.tagName.toLowerCase();\n            table.classList.add('outlineOlive');\n            tableFound=true;\n            \n            if(summary) table.insertAdjacentHTML('beforebegin', `<strong class=\"tableSpan\">&lt;${tagName} summary= \"${summary}\"&gt;</span>`);\n            else if(ariaLabel) table.insertAdjacentHTML('beforebegin', `<strong class=\"tableSpan\">&lt;${tagName} aria-label= \"${ariaLabel}\"&gt;</span>`);\n            else if(labelledByText) table.insertAdjacentHTML('beforebegin', `<strong class=\"tableSpan\">&lt;${tagName} aria-labelledby= \"${labelledByText}\"&gt;</span>`);\n            else if(ariaRole) table.insertAdjacentHTML('beforebegin', `<strong class=\"tableSpan\">&lt;${tagName} role= \"${ariaRole}\"&gt;</span>`);\n            else if(title) table.insertAdjacentHTML('beforebegin', `<strong class=\"tableSpan\">&lt;${tagName} title= \"${title}\"&gt;</span>`);\n            else table.insertAdjacentHTML('beforebegin', `<strong class=\"tableSpan\">&lt;${tagName}&gt;</span>`);            \n        })\n         document.querySelectorAll('tr').forEach(tr =>{\n             if(tr.getAttribute(\"role\")) tr.insertAdjacentHTML('beforebegin', `<strong class=\"tableSpan\">&lt;tr role= \"${tr.getAttribute(\"role\")}\"&gt;</span>`);\n         });\n        if(!tableFound){\n            document.getElementById('tblInfo').innerHTML += 'No tables Found on Page: ' + document.title;\n        }        \n    }\n    \n})();"
    },
    {
        "name": "AAA_BK_Aria-labelOnly",
        "content": "(()=>{\n    //Template\nconst injectStyles = (css) => {\n\tconst style = document.createElement('style');\n\tstyle.innerHTML = css;\n\tdocument.head.appendChild(style);\n\treturn style;\n};\ninjectStyles(`\n    .ariaLabelSpan{\n        color:black;font-weight:bold;font-family:sans-serif;font-size:small;background-color:yellow;outline:orange 2px dashed;margin:0 2px; padding:2px;speak:literal-punctuation;\n    }\n    .outlineGreen{\n        outline:green 2px solid;padding:2px;\n    }\n    .outlineRed{\n        outline: red 2px solid;padding:2px;\n    }    \n`)      \n  const divs=document.querySelectorAll('.langSpan');\n    if(divs.length>0){\n        divs.forEach(div=>div.remove())\n        document.querySelectorAll('.outlineGreen,.outlineOlive,.outlineOrange').forEach(outlineTemp=>{\n            outlineTemp.classList.remove('outlineGreen')\n        });           \n    } else {\n        document.querySelectorAll('a').forEach(elem =>{\n            elem.classList.add('outlineGreen');\n            const ariaLabel = elem.getAttribute(\"aria-label\");\n            if (ariaLabel) {\n                spanTxt = `aria-label=\"${ariaLabel}\"`\n                elem.insertAdjacentHTML('afterend', `\n                    <span class=\"ariaLabelSpan\">${spanTxt}</span>\n                `);                \n            }      \n            \n            \n        })\n        \n    }\n    \n})();"
    },
    {
        "name": "AAA_BlurImages",
        "content": "        const images = document.querySelectorAll('img');\n        images.forEach((img) => {\n            img.style.filter = 'blur(15px)';  // Adjust the blur to 15px for a stronger effect\n        });"
    },
    {
        "name": "BK_PseudoClass",
        "content": "(()=>{\nconst injectStyles = (css) => {\n\tconst style = document.createElement('style');\n\tstyle.innerHTML = css;\n\tdocument.head.appendChild(style);\n\treturn style;\n};\ninjectStyles(`\n    .psuedoContentSpan{\n        color:black;font-weight:bold;font-family:sans-serif;font-size:small;background-color:yellow;outline:orange 2px dashed;margin:0 2px; padding:2px;speak:literal-punctuation;\n    }\n    .outlineRed{\n        outline: red 2px solid;padding:2px;\n    }    \n`)\nconst isVisible = (element) => {\n    while (element) {\n        const style = window.getComputedStyle(element);\n        const ariaHidden = element.getAttribute('aria-hidden');\n        if (style.display === 'none' || style.visibility === 'hidden' || style.opacity === '0' || ariaHidden === 'true') {\n            return false;\n        }\n        element = element.parentElement;\n    }\n    return true;\n}    \n  const divs=document.querySelectorAll('.psuedoContentSpan');\n    if(divs.length>0){\n        divs.forEach(div=>div.remove());\n        document.querySelectorAll(\".outlineRed\").forEach(outlineTemp => outlineTemp.classList.remove(\"outlineRed\"));\n    } else {\n        document.querySelectorAll('*').forEach(element =>{\n        if (isVisible(element)) {\n            const before = window.getComputedStyle(element, '::before');\n            const after = window.getComputedStyle(element, '::after');\n            const parentElement = element.parentElement;\n    \n            // Check if the content property of ::before or ::after is not 'none' or empty\n            if (before.content && before.content !== 'none' && before.content !== '\"\"') {\n                parentElement.classList.add(\"outlineRed\");\n                parentElement.insertAdjacentHTML(\n                  \"afterend\",\n                  `<span class=\"psuedoContentSpan\">before:: \"${before.content}\"</span>`,\n                );                \n            }\n            if (after.content && after.content !== 'none' && after.content !== '\"\"') {\n                parentElement.classList.add(\"outlineRed\");\n                parentElement.insertAdjacentHTML(\n                  \"afterend\",\n                  `<span class=\"psuedoContentSpan\">after:: \"${after.content}\"</span>`,\n                );\n            }\n        }            \n            \n            \n        })\n        \n    }\n    \n})();"
    },
    {
        "name": "BK_24X24Cursor",
        "content": "javascript:(function() {\n    var cursorSize = 22;\n    var cursor = document.createElement('div');\n    cursor.style.width = cursor.style.height = cursorSize + 'px';\n    cursor.style.position = 'fixed';\n    cursor.style.top = cursor.style.left = '0';\n    cursor.style.background = 'transparent'; // Transparent background\n    cursor.style.border = '1px solid white'; // White border\n    cursor.style.outline = '1px solid black'; // Surrounding black outline\n    cursor.style.pointerEvents = 'none';\n    cursor.style.zIndex = '9999';\n    cursor.id = 'custom-cursor';\n\n    document.body.appendChild(cursor);\n\n    document.addEventListener('mousemove', function(e) {\n        var customCursor = document.getElementById('custom-cursor');\n        if (customCursor) {\n            customCursor.style.top = (e.clientY - cursorSize / 2) + 'px';\n            customCursor.style.left = (e.clientX - cursorSize / 2) + 'px';\n        }\n    });\n\n    // Optional: A way to remove the custom cursor when done testing\n    document.addEventListener('keydown', function(e) {\n        if (e.key === 'Escape') {\n            var customCursor = document.getElementById('custom-cursor');\n            if (customCursor) {\n                customCursor.remove();\n            }\n        }\n    });\n})();\n"
    },
    {
        "name": "mausandhoffman_RadioGroup",
        "content": "(()=>{\n  const { waitForElement, loopThroughElements, execOnPage} =    UserWayWidgetApp.getLib('remediation_util');\n   const remediateRadios = (rGrpSel, rGrpLabel) => {\n       waitForElement(rGrpSel, (rGrp) => {\n           rGrp.setAttribute('role','radiogroup');\n           rGrp.setAttribute('aria-label', rGrpLabel);\n          loopThroughElements(\n             'li',\n            listItem => {\n              const radio = listItem.querySelector('input')\n              radio.setAttribute('aria-label', listItem.querySelector('label').textContent);\n                radio.addEventListener('click', () => {\n                  setTimeout(() => remediateRadios('#product__available-sizes','Size'), 500);\n                });\n            },\n              { ancestor: rGrp }\n            );\n        })   \n   }\n    remediateRadios('#product__available-colors','Color');\n    remediateRadios('#product__available-sizes','Size')\n    waitForElement('.product__status', (status) => {\n       status.setAttribute('role','status')\n    })\n    \n})();"
    },
    {
        "name": "mausandhoffman_MegaMenu",
        "content": "(() => {\n   //https://mausandhoffman.com/\n  const {\n    loopThroughElements,\n    waitForElement,\n    clickOnSpace,\n    clickOnEnter,\n    injectStylesheet,\n  } = UserWayWidgetApp.getLib('remediation_util');\n  const HOVERED_LINK_CLASS = 'uw-csr-hovered';\n\n  injectStylesheet(`\n        .header__nav li.open .nav__mega-menu {\n          transform: none ;\n          opacity: 1;\n          visibility: visible;\n        } \n        .nav__mega-menu a:focus-visible, .nav__mega-menu a:focus-visible img{\n         outline: 2px solid blue !important;\n         outline-offset: -3px !important; \n        }\n   `);\n\n  waitForElement('.header__nav', (nav) => {\n    loopThroughElements(\n      'a.nav__item',\n      (menuItem) => {\n        menuItem.addEventListener('mouseenter', () => menuItem.classList.add(HOVERED_LINK_CLASS));\n        menuItem.addEventListener('mouseleave', () =>\n          menuItem.classList.remove(HOVERED_LINK_CLASS),\n        );\n        menuItem.setAttribute('role', 'button');\n        menuItem.setAttribute('aria-expanded', 'false');\n\n        const li = menuItem.parentElement;\n        const subMenu = li.querySelector('.nav__mega-menu');\n        console.log(subMenu)\n        const toggle = () => {\n          if (li.classList.contains('open')) {\n            li.classList.remove('open');\n            console.log('menuItem', menuItem)\n            menuItem.setAttribute('aria-expanded', 'false');\n            menuItem?.focus();\n          } else {\n            li.classList.add('open');\n            menuItem.setAttribute('aria-expanded', 'true');\n            const firstItem = subMenu?.querySelector('a');\n            setTimeout(() => {\n             console.log('firstItem', subMenu, firstItem)\n              firstItem?.focus();\n            }, 100);               \n            \n          }\n        };\n        menuItem.addEventListener('click', (e) => {\n          if (menuItem.classList.contains(HOVERED_LINK_CLASS)) return;\n          e.preventDefault();\n          e.stopPropagation();\n          toggle();\n        });\n        clickOnSpace(menuItem);\n        clickOnEnter(menuItem);\n\n        subMenu?.querySelectorAll('li a').forEach((subanchor) => {\n          subanchor.addEventListener('keydown', (e) => {\n            if (e.keyCode === 27) {\n              e.preventDefault();\n            //  toggle();\n            li.classList.remove('open');\n            console.log('menuItem', menuItem)\n            menuItem.setAttribute('aria-expanded', 'false');\n            menuItem?.focus();                \n            }\n          });\n        });\n      },\n      { ancestor: nav },\n    );\n  });\n})();"
    },
    {
        "name": "mausandhoffman_RadioGroup1",
        "content": "(()=>{\n  const { waitForElement, execOnPage, keys } =    UserWayWidgetApp.getLib('remediation_util');\n\n   const remediateRadios = (rGrpSel, rGrpLabel) => {\n        waitForElement(rGrpSel, (rGrp) => {\n           // console.log(rGrpSel, rGrp)\n            rGrp.setAttribute('role','radiogroup')\n            rGrp.setAttribute('aria-label', rGrpLabel)\n            const radios = rGrp.querySelectorAll('li');\n            let prevRadio = null;\n          \n            radios.forEach((radio, index) => {\n              radio.setAttribute('role', 'radio');\n              radio.setAttribute('aria-label', radio.querySelector('label').textContent);\n              radio.querySelector('input').setAttribute('tabindex','-1');\n              if(radio.className.includes('active')){\n                radio.setAttribute('tabindex', '0');\n                radio.setAttribute('aria-checked','true');\n                prevRadio =radio;\n              }else{\n                radio.setAttribute('tabindex', '-1');\n                radio.setAttribute('aria-checked','false');\n              } //end else\n            radio.addEventListener('keydown', (e) => {\n              let radioToFocusIndex = null;\n              if (keys.isArrowLeft(e) || keys.isArrowUp(e)) {\n                radioToFocusIndex = index - 1;\n              } else if (keys.isArrowRight(e) || keys.isArrowDown(e)) {\n                radioToFocusIndex = index + 1;\n              } else if (!keys.isEnter(e)) {\n                return;\n              }\n\n              e.preventDefault();\n              e.stopImmediatePropagation();\n\n              if (radioToFocusIndex !== null) {\n                if (radioToFocusIndex < 0) {\n                  radioToFocusIndex = radios.length - 1;\n                } else if (radioToFocusIndex > radios.length - 1) {\n                  radioToFocusIndex = 0;\n                }\n                console.log('radioToFocusIndex', radioToFocusIndex, radios[radioToFocusIndex]);\n                const currRadio= radios[radioToFocusIndex];\n                if (currRadio) {\n                  prevRadio.setAttribute('tabindex', '-1');\n                  prevRadio.setAttribute('aria-checked', 'false');\n                  currRadio.setAttribute('tabindex', '0');\n                  currRadio.setAttribute('aria-checked', 'true');\n                  prevRadio = currRadio;\n                  //currRadio.click();\n                  currRadio.focus();\n                  currRadio?.querySelector('input')?.click();\n                  setTimeout(() => remediateRadios('#product__available-sizes','Size'),1000);\n                }\n              }\n            });               \n            });\n          \n        });       \n   }\n\n    remediateRadios('#product__available-colors','Color');\n    remediateRadios('#product__available-sizes','Size')\n    waitForElement('.product__status', (status) => {\n       status.setAttribute('role','status')\n    })\n     \n    \n\n})();"
    },
    {
        "name": "HeadingClass",
        "content": "(()=>{\n// Get all elements on the page\nconst allElements = document.querySelectorAll('*');\n\n// Find elements with class names containing \"header\" or \"heading\"\nconst matchingElements = Array.from(allElements).filter(element =>\n  Array.from(element.classList).some(className => \n    className.includes('header') || className.includes('heading') || className.includes('h1') || className.includes('h2') || className.includes('h3') || className.includes('h4') || className.includes('h5') || className.includes('h6')\n  )\n);\n\n// Log the elements and their class names\nmatchingElements.forEach(element => {\n  console.log(element, Array.from(element.classList).filter(className => \n    className.includes('header') || className.includes('heading')\n  ));\n});\n\n})();"
    },
    {
        "name": "Z-Build",
        "content": "!function(){\"use strict\";function e(e,t){var r,n=Object.keys(e);return Object.getOwnPropertySymbols&&(r=Object.getOwnPropertySymbols(e),t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)),n}function c(n){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?e(Object(i),!0).forEach(function(t){var e,r;e=n,r=i[t=t],(t=function(t){t=function(t,e){if(\"object\"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return(\"string\"===e?String:Number)(t);r=r.call(t,e||\"default\");if(\"object\"!=typeof r)return r;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}(t,\"string\");return\"symbol\"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(i)):e(Object(i)).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(i,t))})}return n}function t(e,r,t,n){if(!(e&&r&&t&&n))throw new Error(\"missing parameter\");var i=UserWayWidgetApp.getLib(\"remediation_util\");if(1===Object.keys(i).length&&void 0!==i.name)throw new Error(\"UserWay remediation library is empty\");function o(t){i.log(e,r,t)}function a(){try{n(c(c({},i),{},{log:o}))}catch(t){o(t.message||\"something went wrong\")}}\"*\"===t?a():t&&i.execOnPage(t,a)}t(\"2100714\",\"ARD-4299\",\"*\",function(t){var e=t.announce;new MutationObserver(function(t){t.forEach(function(t){\"childList\"===t.type&&0<t.addedNodes.length&&t.addedNodes.forEach(function(t){t.nodeType===Node.ELEMENT_NODE&&t.matches('[class^=\"Notifications_notification\"]')&&(t=t.textContent.trim(),e(t))})})}).observe(document.body,{childList:!0,subtree:!0})}),t(\"2100714\",\"ARD-4301\",\"*\",function(t){function e(){i(\"/account/login\",function(){n('[class^=\"PasswordTooltip_passwordtooltip\"]:not([uw-csr-remediated])',function(e){e.setAttribute(\"uw-csr-remediated\",\"\"),e.setAttribute(\"role\",\"button\"),e.setAttribute(\"tabindex\",\"0\"),e.setAttribute(\"aria-expanded\",\"false\"),e.id=e.id||c(),e.addEventListener(\"click\",function(){e.setAttribute(\"aria-expanded\",\"true\"!==e.getAttribute(\"aria-expanded\")),n('[class^=\"PasswordTooltip_info\"]',function(t){t.id=t.id||c(),e.setAttribute(\"aria-controls\",t.id),t.setAttribute(\"role\",\"region\"),t.setAttribute(\"tabindex\",\"-1\")})}),o(e),a(e)})})}var r=t.onHistoryPushState,n=t.waitForElement,i=t.execOnPage,o=t.clickOnEnter,a=t.clickOnSpace,c=t.generateRandomId;e(),r(function(){setTimeout(e,300)})}),t(\"2100714\",\"ARD-4300 ARD-4302 ARD-4303\",\"*\",function(t){var e=t.waitForElement,o=t.generateRandomId,a=t.waitUntil,s=t.isElementVisible,l=t.focusableElementsSelector,d=t.loopThroughElements,f=t.keys;e('button[class^=\"SiteHeader_navButton\"]:not([class*=\"SiteHeader_navButtonSearch\"])',function(n){function t(){var t=n.textContent.trim();0<t.length?n.setAttribute(\"aria-label\",\"Cart with \".concat(t,\" items\")):n.setAttribute(\"aria-label\",\"Cart\"),d('[class^=\"CartItem_priceWrapper\"] [class^=\"CartItem_rrp\"]:not([uw-csr-remediated])',function(t){!function(t){if(t)return getComputedStyle(t).textDecoration.includes(\"line-through\")}(t)||(t.setAttribute(\"uw-csr-remediated\",\"\"),t.setAttribute(\"aria-label\",\"Previous price was \"+t.textContent.trim()))})}t(),n.setAttribute(\"aria-haspopup\",\"dialog\");function i(o){function e(e){var t,r,n,i;f.isTab(e)&&(e.preventDefault(),(t=Array.from(o.querySelectorAll(l)).filter(function(t){return s(t,{shouldBeInViewport:a,skipParentCheck:c})})).length&&(r=t.length-1,i=null,(n=t.findIndex(function(t){return t===e.currentTarget}))<0?i=0:e.shiftKey?(i=n-1)<0&&(i=r):r<(i=n+1)&&(i=0),null!==i&&t[i]&&(u(t[i]),t[i].focus())))}var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=t.shouldBeInViewport,a=void 0===r||r,c=void 0!==(r=t.skipParentCheck)&&r,u=function(t){t.hasAttribute(\"uw-csr-trap-focus-dynamic-content\")||(t.addEventListener(\"keydown\",e),t.setAttribute(\"uw-csr-trap-focus-dynamic-content\",\"\"))};d(l,u,{ancestor:o})}new MutationObserver(t).observe(n,{childList:!0,subtree:!0,characterData:!0});e('[class*=\"Cart_cart\"]',function(t){var e=t.querySelector('[class*=\"Cart_heading\"]'),r=(e&&(e.id=e.id||o(),t.setAttribute(\"aria-labelledby\",e.id)),t.setAttribute(\"role\",\"dialog\"),t.setAttribute(\"aria-modal\",\"true\"),t.querySelector('[class*=\"Cart_heading\"]+button'));r.addEventListener(\"click\",function(){a(function(){return!t.matches('[class*=\"Cart_open\"]')},function(){null!=n&&n.focus()})}),n.addEventListener(\"click\",function(){a(function(){return t.matches('[class*=\"Cart_open\"]')},function(){null!=r&&r.focus(),i(t,{skipParentCheck:!0})})})})})})}();"
    },
    {
        "name": "AxeRun",
        "content": "(async () => {\n  const script = document.createElement('script');\n  script.src = 'https://unpkg.com/axe-core@latest/axe.min.js';\n  document.head.appendChild(script);\n  await new Promise(resolve => script.onload = resolve);\n  axe.run({ runOnly: { type: \"tag\", values: [\"wcag2a\", \"wcag2aa\"] } }).then(results => console.log(results));\n})();"
    },
    {
        "name": "Script snippet #51",
        "content": "(Host.InspectorFrontendHost || InspectorFrontendHost).getPreferences(async r => {\n  for (const {name, content} of JSON.parse(r.scriptSnippets || '[]')) {\n    const a = document.createElement('a');\n    const url = URL.createObjectURL(new Blob([content], {type: 'text/plain'}));\n    a.href = url;\n    a.download = name + '.txt';\n    a.dispatchEvent(new MouseEvent('click'));\n    console.log(name + '...');\n    await new Promise(resolve => setTimeout(resolve, 150));\n    URL.revokeObjectURL(url);\n  }\n});"
    }
]